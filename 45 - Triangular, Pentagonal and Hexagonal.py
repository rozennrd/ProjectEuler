"""
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""
from math import sqrt
from Timer import Timer

t= Timer()
t.start()

def cache(function):
    cache_dic = {}
    def patch(*args):
        if args not in cache_dic:
            cache_dic[args] = function(*args)
        return cache_dic[args]
    return patch


pen_cache = {}
def is_pentagonal(x):
    """
    Utilise cette propriété (wikipédia):
    une solution entière n > 0, c'est-à-dire si le réel suivant est entier :
    n = (1 + sqrt(24 x + 1)) /6 .
    Lorsque n est entier, x est le n-ième nombre pentagonal.
    """
    if x < 0:
        return False
    if x in pen_cache:
        return True
    n= ((1 + sqrt(24 * x + 1)) / 6)
    if n % 1 == 0:
        pen_cache[x] = n
        return True
    return False

@cache
def is_hexagonal(x):
    if x < 0 :
        return False
    n = (sqrt(8*x+1) +1)/4
    if n % 1 ==0:
        return True
    return False


def find_nb():
    i = 286
    while True:
        nb = (i*(i + 1)) / 2
        if is_pentagonal(nb) and is_hexagonal(nb):
            return nb
        i +=1


print(find_nb())
t.stop()
print(t.elapsed)