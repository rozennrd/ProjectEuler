"""
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is
minimised; what is the value of D?
"""

from math import sqrt
from Timer import Timer

t = Timer()
t.start()
cache = {}



def is_pentagonal(x):
    """
    Utilise cette propriété (wikipédia):
    une solution entière n > 0, c'est-à-dire si le réel suivant est entier :
    n = (1 + sqrt(24 x + 1)) /6 .
    Lorsque n est entier, x est le n-ième nombre pentagonal.
    """
    if x < 0:
        return False
    if x in cache:
        return True
    n= ((1 + sqrt(24 * x + 1)) / 6)
    if n % 1 == 0:
        cache[x] = n
        return True
    return False


def find_numbers():
    i = 2
    while True:
        pk = i * (3 * i - 1) / 2
        cache[pk] = i
        for pj in list(cache):
            if pj != pk:
                if is_pentagonal(pj+pk):
                    if is_pentagonal(pk-pj):
                        return pk-pj
                    else:
                        pass
        i+=1

t.stop()
print(find_numbers())
print(t.elapsed)



