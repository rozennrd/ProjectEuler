"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Square 	  	P4,n=n2 	  	1, 4, 9, 16, 25, ...
Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

    The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including
    the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a
    different number in the set.
    This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square,
pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
"""
import sys
from itertools import permutations
from Timer import Timer

NB_LISTES = 6  # taille de la liste de nombres finale = nombre de fonctions vérifiées

def triangle(n):
    return n * (n + 1) / 2


def square(n):
    return n ** 2


def pentagonal(n):
    return n * (3 * n - 1) / 2


def hexagonal(n):
    return n * (2 * n - 1)


def heptagonal(n):
    return n * (5 * n - 3) / 2


def octagonal(n):
    return n * (3 * n - 2)


# First thing to do is define limits for each kind of numbers : we want 4 digits numbers - let's define sets for all
# kinds of numbers
def four_dig_nb(function):
    lst = []
    n = 1
    while len(str(int(function(n)))) < 5:
        n += 1
        if len(str(int(function(n)))) == 4:
            lst.append(int(function(n)))
    return lst


# Then we need to generate lists of numbers of each kind
triangle_nb = four_dig_nb(triangle)
square_nb = four_dig_nb(square)
pent_nb = four_dig_nb(pentagonal)
hex_nb = four_dig_nb(hexagonal)
hept_nb = four_dig_nb(heptagonal)
oct_nb = four_dig_nb(octagonal)

lists = [square_nb, pent_nb, hex_nb, hept_nb, oct_nb]
list_orders = permutations([i for i in range(NB_LISTES-1)])



# on va avoir besoin de vérifier si le début est pareil que la fin
def end_is_beg(n1, n2):
    if str(n1)[2:] == str(n2)[:2] :
         return True
    return False


def has_no_empty_tab(sl):
    for i in range(len(sl)):
        if not sl[i] :
            return False
    return True



def find_compatible_numbers(n, liste):
    """function returning the list of numbers compatible with n"""
    compatible = []
    for nb in liste:
        if end_is_beg(n, nb):
            compatible.append(nb)
    return compatible


if __name__ == "__main__":
    t = Timer()
    t.start()
    list_orders = list(list_orders)

    for list_order in list_orders : # pour chaque ordre de la liste
        # print(list_order)
        # print("-------------------------")
        for n in triangle_nb: # pour chaque nombre triangulaire
            solutions = [[n]]
              # liste de listes qui contiendra en position 0 le nombre de départ, en position 1 toutes les solutions
            # possibles, en position 2 toutes les solutions en partant de la position 1
            for i in range(len(list_order)):
                solutions.append([])

            for i in range(len(list_order)):
                lst = lists[list_order[i]]
                # print(lst)
                for n in solutions[i]:
                    sols = find_compatible_numbers(n, lst)
                    # print(n, sols)
                    if not sols:
                        solutions[i].remove(n)
                    else:
                        for sol in sols:
                            solutions[i+1].append(sol)
                        # print(solutions)
                        if has_no_empty_tab(solutions):
                            # print(solutions)
                            for n in solutions[-1]:
                                if end_is_beg(n, solutions[0][0]):
                                    somme = 0
                                    for l in solutions:
                                        somme += l[0]
                                    print(somme)
                                    t.stop()
                                    print(t.elapsed)
                        #     print(sum(solutions))
                        #     sys.exit()
                        break




# Autre solution utilisant numpy :

import numpy as np
t2 = Timer()
t2.start()
MIN = 999
MAX = 10000

tri = np.array([x * (x + 1) / 2 for x in range(1, 10000)], dtype=int)
tri = tri[(tri > MIN) & (tri < MAX)]

sqr = np.array([x * x for x in range(1, 100)], dtype=int)
sqr = sqr[(sqr > MIN) & (sqr < MAX)]

pen = np.array([x * (3 * x - 1) / 2 for x in range(1, 5000)], dtype=int)
pen = pen[(pen > MIN) & (pen < MAX)]

hex = np.array([x * (2 * x - 1) for x in range(1, 4000)], dtype=int)
hex = hex[(hex > MIN) & (hex < MAX)]

hep = np.array([x * (5 * x - 3) / 2 for x in range(1, 5000)], dtype=int)
hep = hep[(hep > MIN) & (hep < MAX)]

oct = np.array([x * (3 * x - 2) for x in range(1, 4000)], dtype=int)
oct = oct[(oct > MIN) & (oct < MAX)]

groups = [sqr, pen, hex, hep, oct]


def recursive_chain(chain, rem):
    if not rem:
        return np.array(chain)
    else:
        new_chain = []

    for i in chain:
        for j in range(len(rem)):
            temp_chain = [int(str(i) + str(x)) for x in rem[j] if str(x)[:2] == str(i)[-2:]]
            temp_chain = recursive_chain(temp_chain, [rem[k] for k in range(len(rem)) if k != j])
            if temp_chain.size:
                new_chain.extend(temp_chain)
    return np.array(new_chain)


result = str([x for x in recursive_chain(tri, groups) if str(x)[-2:] == str(x)[:2]][0])
result = [int(result[i:i+4]) for i in range(0, len(result), 4)]
print(result)
print(sum(result))
t2.stop()
print(t2.elapsed)